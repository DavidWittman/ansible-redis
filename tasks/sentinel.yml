---
- name: create sentinel working directory
  file:
    path: "{{ redis_sentinel_dir }}"
    state: directory
    recurse: yes
    owner: "{{ redis_user }}"

- name: create sentinel init script
  template:
    src: "{{ item }}"
    dest: /etc/init.d/sentinel_{{ redis_sentinel_port }}
    mode: 0755
  # Choose the distro-specific template. We must specify the templates
  # path here because with_first_found tries to find files in files/
  with_first_found:
    - files:
      - "{{ ansible_os_family }}/redis_sentinel.init.j2"
      - default/redis_sentinel.init.j2
      paths:
        - ../templates
  when: redis_as_service and ansible_service_mgr|default() != "systemd" and not (not redis_install_from_source and redis_service_name == 'redis')

- name: create sentinel systemd service
  template:
    src: "{{ item }}"
    dest: /etc/systemd/system/sentinel_{{ redis_sentinel_port }}.service
    mode: 0644
  with_first_found:
    - files:
      - "{{ ansible_os_family }}/redis_sentinel.service.j2"
      - default/redis_sentinel.service.j2
      paths:
        - ../templates
  register: sentinel_unit_file
  when: redis_as_service and ansible_service_mgr|default() == "systemd" and not (not redis_install_from_source and redis_service_name == 'redis')

- name: create systemd tmpfiles configuration
  template:
    src: etc/tmpfiles.d/redis.conf.j2
    dest: /etc/tmpfiles.d/redis.conf
    mode: 0644
  when:
    - redis_as_service
    - ansible_service_mgr|default() == "systemd"
    - (redis_sentinel_pidfile|dirname).startswith("/var/run") or (redis_sentinel_pidfile|dirname).startswith("/run")
    - not (not redis_install_from_source and redis_service_name == 'redis')

- name: reload systemd daemon
  systemd:
    daemon_reload: true
  when:
    - redis_as_service
    - ansible_service_mgr|default() == "systemd"
    - sentinel_unit_file is changed

- name: set sentinel to start at boot
  service:
    name: sentinel_{{ redis_sentinel_port }}
    enabled: yes
  when: redis_as_service

# Check then create log dir to prevent aggressively overwriting permissions
- name: check if sentinel log directory exists
  stat:
    path: "{{ redis_sentinel_logfile|dirname }}"
  register: sentinel_logdir
  changed_when: false
  when: redis_sentinel_logfile != '""'

- name: create sentinel log directory if it does not exist
  file:
    state: directory
    path: "{{ redis_sentinel_logfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_sentinel_logfile != '""'
    - not sentinel_logdir.stat.exists

- name: touch the sentinel log file
  file:
    state: touch
    path: "{{ redis_sentinel_logfile }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when: redis_sentinel_logfile != '""'

- name: check if sentinel pid directory exists
  stat:
    path: "{{ redis_sentinel_pidfile|dirname }}"
  register: sentinel_piddir
  changed_when: false
  when: redis_sentinel_pidfile != '""'

- name: create sentinel pid directory if it does not exist
  file:
    state: directory
    path: "{{ redis_sentinel_pidfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_sentinel_pidfile != '""'
    - not sentinel_piddir.stat.exists

- name: check if sentinel is running
  command:
    cmd: systemctl status sentinel_{{ redis_sentinel_port }}
  ignore_errors: true
  changed_when: false
  register: sentinel_service_status
  
- name: run flushconfig to rewrite config file from current configuration
  command:
    cmd: "redis-cli -p {{ redis_sentinel_port }} SENTINEL FLUSHCONFIG"
  when: sentinel_service_status.rc == 0

- name: backup existing config file
  copy:
    src: /etc/redis/sentinel_{{ redis_sentinel_port }}.conf
    dest: /etc/redis/sentinel_{{ redis_sentinel_port }}.conf.{{ ansible_date_time['date'] }}
    owner: "{{ redis_user }}"
    mode: 0640
    backup: yes
    remote_src: true
  
- name: create sentinel config file
  template:
    src: redis_sentinel.conf.j2
    dest: /etc/redis/sentinel_{{ redis_sentinel_port }}.conf
    owner: "{{ redis_user }}"
    mode: 0640
  notify: "restart sentinel"
  when: not redis_sentinel_runtime_monitor_master

- name: update static configuration in config file
  blockinfile:
    path: /etc/redis/sentinel_{{ redis_sentinel_port }}.conf
    insertafter: "### STATIC CONFIG START HERE ###"
    insertbefore: "### STATIC CONFIG STOP HERE ###"
    owner: "{{ redis_user }}"
    mode: 0640
    backup: yes
    block: |
      # redis-sentinel {{ redis_version }} configuration file
      # sentinel_{{ redis_sentinel_port }}.conf

      daemonize {{ redis_daemonize }}
      protected-mode {{ redis_sentinel_protected_mode }}
      dir {{ redis_sentinel_dir }}
      pidfile {{ redis_sentinel_pidfile }}
      port {{ redis_sentinel_port }}
      bind {{ redis_sentinel_bind }}

      # Security
      {% if redis_sentinel_password %}
      requirepass {{ redis_sentinel_password }}
      {% endif %}

      {% for master in redis_sentinel_monitors -%}
      sentinel monitor {{ master.name }} {{ master.host }} {{ master.port }} {{ master.quorum|d('2') }}
      {% for option in ('auth_pass', 'down_after_milliseconds', 'parallel_syncs', 'failover_timeout', 'notification_script', 'client_reconfig_script') -%}
      {% if master[option] is defined and master[option] -%}
      sentinel {{ option|replace('_', '-') }} {{ master.name }} {{ master[option] }}
      {% endif %}
      {% endfor -%}
      {% if master['rename_commands'] is defined -%}
      {% for command in master['rename_commands'] -%}
      sentinel rename-command {{ master.name }} {{ command }}
      {% endfor -%}
      {% endif -%}
      {% endfor -%}

      logfile {{ redis_sentinel_logfile }}
      syslog-enabled {{ redis_syslog_enabled }}
      syslog-ident {{ redis_sentinel_syslog_ident }}
      syslog-facility {{ redis_syslog_facility }}
  when: redis_sentinel_runtime_monitor_master == true

- name: add sentinel init config file
  template:
    dest: /etc/sysconfig/sentinel_{{ redis_sentinel_port }}
    src: redis.init.conf.j2
  when: ansible_os_family == "RedHat"
  notify: "restart sentinel"

- name: add sentinel init config file
  template:
    dest: /etc/default/sentinel_{{ redis_sentinel_port }}
    src: redis.init.conf.j2
  when: ansible_os_family == "Debian"
  notify: "restart sentinel"

# Flush handlers before ensuring the service is started to prevent
# a start and then restart
- name: flush handlers to apply config changes
  meta: flush_handlers

- name: ensure sentinel is running
  service:
    name: sentinel_{{ redis_sentinel_port }}
    state: started
  when: redis_as_service
